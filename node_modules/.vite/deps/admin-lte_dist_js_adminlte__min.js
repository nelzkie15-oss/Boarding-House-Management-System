import {
  __commonJS
} from "./chunk-PLDDJCW6.js";

// node_modules/admin-lte/dist/js/adminlte.min.js
var require_adminlte_min = __commonJS({
  "node_modules/admin-lte/dist/js/adminlte.min.js"(exports, module) {
    !function(e, t) {
      "object" == typeof exports && "undefined" != typeof module ? t(exports) : "function" == typeof define && define.amd ? define(["exports"], t) : t((e = "undefined" != typeof globalThis ? globalThis : e || self).adminlte = {});
    }(exports, function(e) {
      "use strict";
      const t = [], n = (e2) => {
        "loading" === document.readyState ? (t.length || document.addEventListener("DOMContentLoaded", () => {
          for (const e3 of t) e3();
        }), t.push(e2)) : e2();
      }, s = (e2, t2 = 500) => {
        e2.style.transitionProperty = "height, margin, padding", e2.style.transitionDuration = `${t2}ms`, e2.style.boxSizing = "border-box", e2.style.height = `${e2.offsetHeight}px`, e2.style.overflow = "hidden", window.setTimeout(() => {
          e2.style.height = "0", e2.style.paddingTop = "0", e2.style.paddingBottom = "0", e2.style.marginTop = "0", e2.style.marginBottom = "0";
        }, 1), window.setTimeout(() => {
          e2.style.display = "none", e2.style.removeProperty("height"), e2.style.removeProperty("padding-top"), e2.style.removeProperty("padding-bottom"), e2.style.removeProperty("margin-top"), e2.style.removeProperty("margin-bottom"), e2.style.removeProperty("overflow"), e2.style.removeProperty("transition-duration"), e2.style.removeProperty("transition-property");
        }, t2);
      }, i = (e2, t2 = 500) => {
        e2.style.removeProperty("display");
        let { display: n2 } = window.getComputedStyle(e2);
        "none" === n2 && (n2 = "block"), e2.style.display = n2;
        const s2 = e2.offsetHeight;
        e2.style.overflow = "hidden", e2.style.height = "0", e2.style.paddingTop = "0", e2.style.paddingBottom = "0", e2.style.marginTop = "0", e2.style.marginBottom = "0", window.setTimeout(() => {
          e2.style.boxSizing = "border-box", e2.style.transitionProperty = "height, margin, padding", e2.style.transitionDuration = `${t2}ms`, e2.style.height = `${s2}px`, e2.style.removeProperty("padding-top"), e2.style.removeProperty("padding-bottom"), e2.style.removeProperty("margin-top"), e2.style.removeProperty("margin-bottom");
        }, 1), window.setTimeout(() => {
          e2.style.removeProperty("height"), e2.style.removeProperty("overflow"), e2.style.removeProperty("transition-duration"), e2.style.removeProperty("transition-property");
        }, t2);
      }, o = "hold-transition";
      class l {
        constructor(e2) {
          this._element = e2;
        }
        holdTransition() {
          let e2;
          window.addEventListener("resize", () => {
            document.body.classList.add(o), clearTimeout(e2), e2 = setTimeout(() => {
              document.body.classList.remove(o);
            }, 400);
          });
        }
      }
      n(() => {
        new l(document.body).holdTransition(), setTimeout(() => {
          document.body.classList.add("app-loaded");
        }, 400);
      });
      const a = ".lte.push-menu", r = `open${a}`, c = `collapse${a}`, d = "sidebar-mini", m = "sidebar-collapse", p = "sidebar-open", h = "sidebar-expand", u = `[class*="${h}"]`, v = '[data-lte-toggle="sidebar"]', y = { sidebarBreakpoint: 992 };
      class g {
        constructor(e2, t2) {
          this._element = e2, this._config = Object.assign(Object.assign({}, y), t2);
        }
        menusClose() {
          document.querySelectorAll(".nav-treeview").forEach((e3) => {
            e3.style.removeProperty("display"), e3.style.removeProperty("height");
          });
          const e2 = document.querySelector(".sidebar-menu"), t2 = null == e2 ? void 0 : e2.querySelectorAll(".nav-item");
          t2 && t2.forEach((e3) => {
            e3.classList.remove("menu-open");
          });
        }
        expand() {
          const e2 = new Event(r);
          document.body.classList.remove(m), document.body.classList.add(p), this._element.dispatchEvent(e2);
        }
        collapse() {
          const e2 = new Event(c);
          document.body.classList.remove(p), document.body.classList.add(m), this._element.dispatchEvent(e2);
        }
        addSidebarBreakPoint() {
          var e2, t2, n2;
          const s2 = null !== (t2 = null === (e2 = document.querySelector(u)) || void 0 === e2 ? void 0 : e2.classList) && void 0 !== t2 ? t2 : [], i2 = null !== (n2 = Array.from(s2).find((e3) => e3.startsWith(h))) && void 0 !== n2 ? n2 : "", o2 = document.getElementsByClassName(i2)[0], l2 = window.getComputedStyle(o2, "::before").getPropertyValue("content");
          this._config = Object.assign(Object.assign({}, this._config), { sidebarBreakpoint: Number(l2.replace(/[^\d.-]/g, "")) }), window.innerWidth <= this._config.sidebarBreakpoint ? this.collapse() : (document.body.classList.contains(d) || this.expand(), document.body.classList.contains(d) && document.body.classList.contains(m) && this.collapse());
        }
        toggle() {
          document.body.classList.contains(m) ? this.expand() : this.collapse();
        }
        init() {
          this.addSidebarBreakPoint();
        }
      }
      n(() => {
        var e2;
        const t2 = null === document || void 0 === document ? void 0 : document.querySelector(".app-sidebar");
        if (t2) {
          const e3 = new g(t2, y);
          e3.init(), window.addEventListener("resize", () => {
            e3.init();
          });
        }
        const n2 = document.createElement("div");
        n2.className = "sidebar-overlay", null === (e2 = document.querySelector(".app-wrapper")) || void 0 === e2 || e2.append(n2), n2.addEventListener("touchstart", (e3) => {
          e3.preventDefault();
          const t3 = e3.currentTarget;
          new g(t3, y).collapse();
        }), n2.addEventListener("click", (e3) => {
          e3.preventDefault();
          const t3 = e3.currentTarget;
          new g(t3, y).collapse();
        }), document.querySelectorAll(v).forEach((e3) => {
          e3.addEventListener("click", (e4) => {
            e4.preventDefault();
            let t3 = e4.currentTarget;
            "sidebar" !== (null == t3 ? void 0 : t3.dataset.lteToggle) && (t3 = null == t3 ? void 0 : t3.closest(v)), t3 && (null == e4 || e4.preventDefault(), new g(t3, y).toggle());
          });
        });
      });
      const f = ".lte.treeview", _ = `expanded${f}`, E = `collapsed${f}`, b = "menu-open", w = ".nav-item", L = ".nav-treeview", S = { animationSpeed: 300, accordion: true };
      class x {
        constructor(e2, t2) {
          this._element = e2, this._config = Object.assign(Object.assign({}, S), t2);
        }
        open() {
          var e2, t2;
          const n2 = new Event(_);
          if (this._config.accordion) {
            const t3 = null === (e2 = this._element.parentElement) || void 0 === e2 ? void 0 : e2.querySelectorAll(`${w}.${b}`);
            null == t3 || t3.forEach((e3) => {
              if (e3 !== this._element.parentElement) {
                e3.classList.remove(b);
                const t4 = null == e3 ? void 0 : e3.querySelector(L);
                t4 && s(t4, this._config.animationSpeed);
              }
            });
          }
          this._element.classList.add(b);
          const o2 = null === (t2 = this._element) || void 0 === t2 ? void 0 : t2.querySelector(L);
          o2 && i(o2, this._config.animationSpeed), this._element.dispatchEvent(n2);
        }
        close() {
          var e2;
          const t2 = new Event(E);
          this._element.classList.remove(b);
          const n2 = null === (e2 = this._element) || void 0 === e2 ? void 0 : e2.querySelector(L);
          n2 && s(n2, this._config.animationSpeed), this._element.dispatchEvent(t2);
        }
        toggle() {
          this._element.classList.contains(b) ? this.close() : this.open();
        }
      }
      n(() => {
        document.querySelectorAll('[data-lte-toggle="treeview"]').forEach((e2) => {
          e2.addEventListener("click", (e3) => {
            const t2 = e3.target, n2 = t2.closest(w), s2 = t2.closest(".nav-link");
            "#" !== (null == t2 ? void 0 : t2.getAttribute("href")) && "#" !== (null == s2 ? void 0 : s2.getAttribute("href")) || e3.preventDefault(), n2 && new x(n2, S).toggle();
          });
        });
      });
      const T = ".lte.direct-chat", $ = `expanded${T}`, q = `collapsed${T}`, P = "direct-chat-contacts-open";
      class z {
        constructor(e2) {
          this._element = e2;
        }
        toggle() {
          if (this._element.classList.contains(P)) {
            const e2 = new Event(q);
            this._element.classList.remove(P), this._element.dispatchEvent(e2);
          } else {
            const e2 = new Event($);
            this._element.classList.add(P), this._element.dispatchEvent(e2);
          }
        }
      }
      n(() => {
        document.querySelectorAll('[data-lte-toggle="chat-pane"]').forEach((e2) => {
          e2.addEventListener("click", (e3) => {
            e3.preventDefault();
            const t2 = e3.target.closest(".direct-chat");
            t2 && new z(t2).toggle();
          });
        });
      });
      const k = ".lte.card-widget", A = `collapsed${k}`, D = `expanded${k}`, B = `remove${k}`, j = `maximized${k}`, F = `minimized${k}`, O = "card", C = "collapsed-card", M = "collapsing-card", H = "expanding-card", W = "was-collapsed", N = "maximized-card", V = '[data-lte-toggle="card-remove"]', G = '[data-lte-toggle="card-collapse"]', I = '[data-lte-toggle="card-maximize"]', J = `.${O}`, K = ".card-body", Q = ".card-footer", R = { animationSpeed: 500, collapseTrigger: G, removeTrigger: V, maximizeTrigger: I };
      class U {
        constructor(e2, t2) {
          this._element = e2, this._parent = e2.closest(J), e2.classList.contains(O) && (this._parent = e2), this._config = Object.assign(Object.assign({}, R), t2);
        }
        collapse() {
          var e2, t2;
          const n2 = new Event(A);
          this._parent && (this._parent.classList.add(M), (null === (e2 = this._parent) || void 0 === e2 ? void 0 : e2.querySelectorAll(`${K}, ${Q}`)).forEach((e3) => {
            e3 instanceof HTMLElement && s(e3, this._config.animationSpeed);
          }), setTimeout(() => {
            this._parent && (this._parent.classList.add(C), this._parent.classList.remove(M));
          }, this._config.animationSpeed)), null === (t2 = this._element) || void 0 === t2 || t2.dispatchEvent(n2);
        }
        expand() {
          var e2, t2;
          const n2 = new Event(D);
          this._parent && (this._parent.classList.add(H), (null === (e2 = this._parent) || void 0 === e2 ? void 0 : e2.querySelectorAll(`${K}, ${Q}`)).forEach((e3) => {
            e3 instanceof HTMLElement && i(e3, this._config.animationSpeed);
          }), setTimeout(() => {
            this._parent && (this._parent.classList.remove(C), this._parent.classList.remove(H));
          }, this._config.animationSpeed)), null === (t2 = this._element) || void 0 === t2 || t2.dispatchEvent(n2);
        }
        remove() {
          var e2;
          const t2 = new Event(B);
          this._parent && s(this._parent, this._config.animationSpeed), null === (e2 = this._element) || void 0 === e2 || e2.dispatchEvent(t2);
        }
        toggle() {
          var e2;
          (null === (e2 = this._parent) || void 0 === e2 ? void 0 : e2.classList.contains(C)) ? this.expand() : this.collapse();
        }
        maximize() {
          var e2;
          const t2 = new Event(j);
          this._parent && (this._parent.style.height = `${this._parent.offsetHeight}px`, this._parent.style.width = `${this._parent.offsetWidth}px`, this._parent.style.transition = "all .15s", setTimeout(() => {
            const e3 = document.querySelector("html");
            e3 && e3.classList.add(N), this._parent && (this._parent.classList.add(N), this._parent.classList.contains(C) && this._parent.classList.add(W));
          }, 150)), null === (e2 = this._element) || void 0 === e2 || e2.dispatchEvent(t2);
        }
        minimize() {
          var e2;
          const t2 = new Event(F);
          this._parent && (this._parent.style.height = "auto", this._parent.style.width = "auto", this._parent.style.transition = "all .15s", setTimeout(() => {
            var e3;
            const t3 = document.querySelector("html");
            t3 && t3.classList.remove(N), this._parent && (this._parent.classList.remove(N), (null === (e3 = this._parent) || void 0 === e3 ? void 0 : e3.classList.contains(W)) && this._parent.classList.remove(W));
          }, 10)), null === (e2 = this._element) || void 0 === e2 || e2.dispatchEvent(t2);
        }
        toggleMaximize() {
          var e2;
          (null === (e2 = this._parent) || void 0 === e2 ? void 0 : e2.classList.contains(N)) ? this.minimize() : this.maximize();
        }
      }
      n(() => {
        document.querySelectorAll(G).forEach((e2) => {
          e2.addEventListener("click", (e3) => {
            e3.preventDefault();
            const t2 = e3.target;
            new U(t2, R).toggle();
          });
        }), document.querySelectorAll(V).forEach((e2) => {
          e2.addEventListener("click", (e3) => {
            e3.preventDefault();
            const t2 = e3.target;
            new U(t2, R).remove();
          });
        }), document.querySelectorAll(I).forEach((e2) => {
          e2.addEventListener("click", (e3) => {
            e3.preventDefault();
            const t2 = e3.target;
            new U(t2, R).toggleMaximize();
          });
        });
      });
      const X = ".lte.fullscreen", Y = `maximized${X}`, Z = `minimized${X}`, ee = '[data-lte-toggle="fullscreen"]', te = '[data-lte-icon="maximize"]', ne = '[data-lte-icon="minimize"]';
      class se {
        constructor(e2, t2) {
          this._element = e2, this._config = t2;
        }
        inFullScreen() {
          const e2 = new Event(Y), t2 = document.querySelector(te), n2 = document.querySelector(ne);
          document.documentElement.requestFullscreen(), t2 && (t2.style.display = "none"), n2 && (n2.style.display = "block"), this._element.dispatchEvent(e2);
        }
        outFullscreen() {
          const e2 = new Event(Z), t2 = document.querySelector(te), n2 = document.querySelector(ne);
          document.exitFullscreen(), t2 && (t2.style.display = "block"), n2 && (n2.style.display = "none"), this._element.dispatchEvent(e2);
        }
        toggleFullScreen() {
          document.fullscreenEnabled && (document.fullscreenElement ? this.outFullscreen() : this.inFullScreen());
        }
      }
      n(() => {
        document.querySelectorAll(ee).forEach((e2) => {
          e2.addEventListener("click", (e3) => {
            e3.preventDefault();
            const t2 = e3.target.closest(ee);
            t2 && new se(t2, void 0).toggleFullScreen();
          });
        });
      }), e.CardWidget = U, e.DirectChat = z, e.FullScreen = se, e.Layout = l, e.PushMenu = g, e.Treeview = x;
    });
  }
});
export default require_adminlte_min();
/*! Bundled license information:

admin-lte/dist/js/adminlte.min.js:
  (*!
   * AdminLTE v4.0.0-beta1 (https://adminlte.io)
   * Copyright 2014-2024 Colorlib <https://colorlib.com>
   * Licensed under MIT (https://github.com/ColorlibHQ/AdminLTE/blob/master/LICENSE)
   *)
*/
//# sourceMappingURL=admin-lte_dist_js_adminlte__min.js.map
